[2022-05-02 10:01:43,559] INFO [Controller id=2] Shutting down broker 2 (kafka.controller.KafkaController)
[2022-05-02 10:01:43,561] DEBUG [Controller id=2] All shutting down brokers: 2 (kafka.controller.KafkaController)
[2022-05-02 10:01:43,561] DEBUG [Controller id=2] Live brokers: 1 (kafka.controller.KafkaController)
[2022-05-02 10:01:43,575] TRACE [Controller id=2] All leaders = __consumer_offsets-13 -> (Leader:2,ISR:2,LeaderEpoch:9,ZkVersion:9,ControllerEpoch:8),__consumer_offsets-46 -> (Leader:1,ISR:1,LeaderEpoch:9,ZkVersion:9,ControllerEpoch:8),__consumer_offsets-9 -> (Leader:2,ISR:2,LeaderEpoch:9,ZkVersion:9,ControllerEpoch:8),__consumer_offsets-42 -> (Leader:1,ISR:1,LeaderEpoch:8,ZkVersion:8,ControllerEpoch:8),__consumer_offsets-21 -> (Leader:2,ISR:2,LeaderEpoch:9,ZkVersion:9,ControllerEpoch:8),__consumer_offsets-17 -> (Leader:2,ISR:2,LeaderEpoch:9,ZkVersion:9,ControllerEpoch:8),__consumer_offsets-30 -> (Leader:1,ISR:1,LeaderEpoch:9,ZkVersion:9,ControllerEpoch:8),__consumer_offsets-26 -> (Leader:1,ISR:1,LeaderEpoch:9,ZkVersion:9,ControllerEpoch:8),__consumer_offsets-5 -> (Leader:2,ISR:2,LeaderEpoch:9,ZkVersion:9,ControllerEpoch:8),__consumer_offsets-38 -> (Leader:1,ISR:1,LeaderEpoch:9,ZkVersion:9,ControllerEpoch:8),__consumer_offsets-1 -> (Leader:2,ISR:2,LeaderEpoch:9,ZkVersion:9,ControllerEpoch:8),__consumer_offsets-34 -> (Leader:1,ISR:1,LeaderEpoch:9,ZkVersion:9,ControllerEpoch:8),__consumer_offsets-16 -> (Leader:1,ISR:1,LeaderEpoch:8,ZkVersion:8,ControllerEpoch:8),__consumer_offsets-45 -> (Leader:2,ISR:2,LeaderEpoch:9,ZkVersion:9,ControllerEpoch:8),__consumer_offsets-12 -> (Leader:1,ISR:1,LeaderEpoch:9,ZkVersion:9,ControllerEpoch:8),__consumer_offsets-41 -> (Leader:2,ISR:2,LeaderEpoch:9,ZkVersion:9,ControllerEpoch:8),__consumer_offsets-24 -> (Leader:1,ISR:1,LeaderEpoch:9,ZkVersion:9,ControllerEpoch:8),__consumer_offsets-20 -> (Leader:1,ISR:1,LeaderEpoch:8,ZkVersion:8,ControllerEpoch:8),__consumer_offsets-49 -> (Leader:2,ISR:2,LeaderEpoch:9,ZkVersion:9,ControllerEpoch:8),__consumer_offsets-0 -> (Leader:1,ISR:1,LeaderEpoch:8,ZkVersion:8,ControllerEpoch:8),__consumer_offsets-29 -> (Leader:2,ISR:2,LeaderEpoch:9,ZkVersion:9,ControllerEpoch:8),__consumer_offsets-25 -> (Leader:2,ISR:2,LeaderEpoch:9,ZkVersion:9,ControllerEpoch:8),__consumer_offsets-8 -> (Leader:1,ISR:1,LeaderEpoch:9,ZkVersion:9,ControllerEpoch:8),__consumer_offsets-37 -> (Leader:2,ISR:2,LeaderEpoch:9,ZkVersion:9,ControllerEpoch:8),__consumer_offsets-4 -> (Leader:1,ISR:1,LeaderEpoch:9,ZkVersion:9,ControllerEpoch:8),__consumer_offsets-33 -> (Leader:2,ISR:2,LeaderEpoch:9,ZkVersion:9,ControllerEpoch:8),__consumer_offsets-15 -> (Leader:2,ISR:2,LeaderEpoch:9,ZkVersion:9,ControllerEpoch:8),__consumer_offsets-48 -> (Leader:1,ISR:1,LeaderEpoch:9,ZkVersion:9,ControllerEpoch:8),__consumer_offsets-11 -> (Leader:2,ISR:2,LeaderEpoch:9,ZkVersion:9,ControllerEpoch:8),__consumer_offsets-44 -> (Leader:1,ISR:1,LeaderEpoch:8,ZkVersion:8,ControllerEpoch:8),__consumer_offsets-23 -> (Leader:2,ISR:2,LeaderEpoch:9,ZkVersion:9,ControllerEpoch:8),__consumer_offsets-19 -> (Leader:2,ISR:2,LeaderEpoch:9,ZkVersion:9,ControllerEpoch:8),__consumer_offsets-32 -> (Leader:1,ISR:1,LeaderEpoch:8,ZkVersion:8,ControllerEpoch:8),output-0 -> (Leader:2,ISR:2,LeaderEpoch:9,ZkVersion:9,ControllerEpoch:8),__consumer_offsets-28 -> (Leader:1,ISR:1,LeaderEpoch:8,ZkVersion:8,ControllerEpoch:8),__consumer_offsets-7 -> (Leader:2,ISR:2,LeaderEpoch:9,ZkVersion:9,ControllerEpoch:8),__consumer_offsets-40 -> (Leader:1,ISR:1,LeaderEpoch:8,ZkVersion:8,ControllerEpoch:8),__consumer_offsets-3 -> (Leader:2,ISR:2,LeaderEpoch:9,ZkVersion:9,ControllerEpoch:8),__consumer_offsets-36 -> (Leader:1,ISR:1,LeaderEpoch:8,ZkVersion:8,ControllerEpoch:8),__consumer_offsets-47 -> (Leader:2,ISR:2,LeaderEpoch:9,ZkVersion:9,ControllerEpoch:8),__consumer_offsets-14 -> (Leader:1,ISR:1,LeaderEpoch:8,ZkVersion:8,ControllerEpoch:8),__consumer_offsets-43 -> (Leader:2,ISR:2,LeaderEpoch:9,ZkVersion:9,ControllerEpoch:8),__consumer_offsets-10 -> (Leader:1,ISR:1,LeaderEpoch:8,ZkVersion:8,ControllerEpoch:8),__consumer_offsets-22 -> (Leader:1,ISR:1,LeaderEpoch:9,ZkVersion:9,ControllerEpoch:8),__consumer_offsets-18 -> (Leader:1,ISR:1,LeaderEpoch:8,ZkVersion:8,ControllerEpoch:8),__consumer_offsets-31 -> (Leader:2,ISR:2,LeaderEpoch:9,ZkVersion:9,ControllerEpoch:8),input-0 -> (Leader:1,ISR:1,LeaderEpoch:8,ZkVersion:8,ControllerEpoch:8),__consumer_offsets-27 -> (Leader:2,ISR:2,LeaderEpoch:9,ZkVersion:9,ControllerEpoch:8),__consumer_offsets-39 -> (Leader:2,ISR:2,LeaderEpoch:9,ZkVersion:9,ControllerEpoch:8),__consumer_offsets-6 -> (Leader:1,ISR:1,LeaderEpoch:8,ZkVersion:8,ControllerEpoch:8),__consumer_offsets-35 -> (Leader:2,ISR:2,LeaderEpoch:9,ZkVersion:9,ControllerEpoch:8),__consumer_offsets-2 -> (Leader:1,ISR:1,LeaderEpoch:8,ZkVersion:8,ControllerEpoch:8) (kafka.controller.KafkaController)
[2022-05-02 10:01:44,356] INFO [ControllerEventThread controllerId=2] Shutting down (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-02 10:01:44,357] INFO [ControllerEventThread controllerId=2] Stopped (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-02 10:01:44,357] INFO [ControllerEventThread controllerId=2] Shutdown completed (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-02 10:01:44,358] DEBUG [Controller id=2] Resigning (kafka.controller.KafkaController)
[2022-05-02 10:01:44,359] DEBUG [Controller id=2] Unregister BrokerModifications handler for Set(1, 2) (kafka.controller.KafkaController)
[2022-05-02 10:01:44,360] INFO [PartitionStateMachine controllerId=2] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2022-05-02 10:01:44,362] INFO [ReplicaStateMachine controllerId=2] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2022-05-02 10:01:44,363] INFO [RequestSendThread controllerId=2] Shutting down (kafka.controller.RequestSendThread)
[2022-05-02 10:01:44,363] INFO [RequestSendThread controllerId=2] Stopped (kafka.controller.RequestSendThread)
[2022-05-02 10:01:44,363] INFO [RequestSendThread controllerId=2] Shutdown completed (kafka.controller.RequestSendThread)
[2022-05-02 10:01:44,365] INFO [RequestSendThread controllerId=2] Shutting down (kafka.controller.RequestSendThread)
[2022-05-02 10:01:44,366] INFO [RequestSendThread controllerId=2] Stopped (kafka.controller.RequestSendThread)
[2022-05-02 10:01:44,366] INFO [RequestSendThread controllerId=2] Shutdown completed (kafka.controller.RequestSendThread)
[2022-05-02 10:01:44,370] INFO [Controller id=2] Resigned (kafka.controller.KafkaController)
[2022-05-02 10:05:59,617] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@532760d8, name=log4j:logger=kafka.controller (kafka.controller)
[2022-05-02 10:06:25,613] INFO [ControllerEventThread controllerId=2] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-02 10:06:25,673] INFO [Controller id=2] 2 successfully elected as the controller. Epoch incremented to 9 and epoch zk version is now 9 (kafka.controller.KafkaController)
[2022-05-02 10:06:25,683] INFO [Controller id=2] Registering handlers (kafka.controller.KafkaController)
[2022-05-02 10:06:25,701] INFO [Controller id=2] Deleting log dir event notifications (kafka.controller.KafkaController)
[2022-05-02 10:06:25,711] INFO [Controller id=2] Deleting isr change notifications (kafka.controller.KafkaController)
[2022-05-02 10:06:25,723] INFO [Controller id=2] Initializing controller context (kafka.controller.KafkaController)
[2022-05-02 10:06:25,759] INFO [Controller id=2] Initialized broker epochs cache: HashMap(2 -> 950) (kafka.controller.KafkaController)
[2022-05-02 10:06:25,808] DEBUG [Controller id=2] Register BrokerModifications handler for Set(2) (kafka.controller.KafkaController)
[2022-05-02 10:06:25,946] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2022-05-02 10:06:25,981] INFO [Controller id=2] Currently active brokers in the cluster: Set(2) (kafka.controller.KafkaController)
[2022-05-02 10:06:25,981] INFO [Controller id=2] Currently shutting brokers in the cluster: HashSet() (kafka.controller.KafkaController)
[2022-05-02 10:06:25,987] INFO [Controller id=2] Current list of topics in the cluster: HashSet(output, input, __consumer_offsets) (kafka.controller.KafkaController)
[2022-05-02 10:06:25,989] INFO [Controller id=2] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2022-05-02 10:06:25,991] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2022-05-02 10:06:26,010] INFO [Controller id=2] List of topics to be deleted:  (kafka.controller.KafkaController)
[2022-05-02 10:06:26,011] INFO [Controller id=2] List of topics ineligible for deletion: input,__consumer_offsets (kafka.controller.KafkaController)
[2022-05-02 10:06:26,012] INFO [Controller id=2] Initializing topic deletion manager (kafka.controller.KafkaController)
[2022-05-02 10:06:26,013] INFO [Topic Deletion Manager 2] Initializing manager with initial deletions: Set(), initial ineligible deletions: HashSet(input, __consumer_offsets) (kafka.controller.TopicDeletionManager)
[2022-05-02 10:06:26,018] INFO [Controller id=2] Sending update metadata request (kafka.controller.KafkaController)
[2022-05-02 10:06:26,051] INFO [ReplicaStateMachine controllerId=2] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2022-05-02 10:06:26,059] INFO [RequestSendThread controllerId=2] Controller 2 connected to fedora:9093 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2022-05-02 10:06:26,069] INFO [ReplicaStateMachine controllerId=2] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2022-05-02 10:06:26,200] INFO [ReplicaStateMachine controllerId=2] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2022-05-02 10:06:26,442] DEBUG [ReplicaStateMachine controllerId=2] Started replica state machine with initial state -> HashMap([Topic=__consumer_offsets,Partition=46,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=19,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=8,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=20,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=41,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=17,Replica=2] -> OnlineReplica, [Topic=input,Partition=0,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=30,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=0,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=29,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=40,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=49,Replica=2] -> OnlineReplica, [Topic=output,Partition=0,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=10,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=4,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=16,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=45,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=35,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=5,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=26,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=3,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=43,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=2,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=31,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=39,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=34,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=24,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=11,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=25,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=13,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=32,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=7,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=15,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=21,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=36,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=48,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=27,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=18,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=44,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=23,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=6,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=47,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=37,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=1,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=42,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=9,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=28,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=12,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=38,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=33,Replica=2] -> OnlineReplica, [Topic=__consumer_offsets,Partition=14,Replica=1] -> OfflineReplica, [Topic=__consumer_offsets,Partition=22,Replica=1] -> OfflineReplica) (kafka.controller.ZkReplicaStateMachine)
[2022-05-02 10:06:26,442] INFO [PartitionStateMachine controllerId=2] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2022-05-02 10:06:26,452] INFO [PartitionStateMachine controllerId=2] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2022-05-02 10:06:26,629] DEBUG [PartitionStateMachine controllerId=2] Started partition state machine with initial state -> HashMap(__consumer_offsets-13 -> OnlinePartition, __consumer_offsets-46 -> OfflinePartition, __consumer_offsets-9 -> OnlinePartition, __consumer_offsets-42 -> OfflinePartition, __consumer_offsets-21 -> OnlinePartition, __consumer_offsets-17 -> OnlinePartition, __consumer_offsets-30 -> OfflinePartition, __consumer_offsets-26 -> OfflinePartition, __consumer_offsets-5 -> OnlinePartition, __consumer_offsets-38 -> OfflinePartition, __consumer_offsets-1 -> OnlinePartition, __consumer_offsets-34 -> OfflinePartition, __consumer_offsets-16 -> OfflinePartition, __consumer_offsets-45 -> OnlinePartition, __consumer_offsets-12 -> OfflinePartition, __consumer_offsets-41 -> OnlinePartition, __consumer_offsets-24 -> OfflinePartition, __consumer_offsets-20 -> OfflinePartition, __consumer_offsets-49 -> OnlinePartition, __consumer_offsets-0 -> OfflinePartition, __consumer_offsets-29 -> OnlinePartition, __consumer_offsets-25 -> OnlinePartition, __consumer_offsets-8 -> OfflinePartition, __consumer_offsets-37 -> OnlinePartition, __consumer_offsets-4 -> OfflinePartition, __consumer_offsets-33 -> OnlinePartition, __consumer_offsets-15 -> OnlinePartition, __consumer_offsets-48 -> OfflinePartition, __consumer_offsets-11 -> OnlinePartition, __consumer_offsets-44 -> OfflinePartition, __consumer_offsets-23 -> OnlinePartition, __consumer_offsets-19 -> OnlinePartition, __consumer_offsets-32 -> OfflinePartition, output-0 -> OnlinePartition, __consumer_offsets-28 -> OfflinePartition, __consumer_offsets-7 -> OnlinePartition, __consumer_offsets-40 -> OfflinePartition, __consumer_offsets-3 -> OnlinePartition, __consumer_offsets-36 -> OfflinePartition, __consumer_offsets-47 -> OnlinePartition, __consumer_offsets-14 -> OfflinePartition, __consumer_offsets-43 -> OnlinePartition, __consumer_offsets-10 -> OfflinePartition, __consumer_offsets-22 -> OfflinePartition, __consumer_offsets-18 -> OfflinePartition, __consumer_offsets-31 -> OnlinePartition, input-0 -> OfflinePartition, __consumer_offsets-27 -> OnlinePartition, __consumer_offsets-39 -> OnlinePartition, __consumer_offsets-6 -> OfflinePartition, __consumer_offsets-35 -> OnlinePartition, __consumer_offsets-2 -> OfflinePartition) (kafka.controller.ZkPartitionStateMachine)
[2022-05-02 10:06:26,630] INFO [Controller id=2] Ready to serve as the new controller with epoch 9 (kafka.controller.KafkaController)
[2022-05-02 10:06:26,649] INFO [Controller id=2] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2022-05-02 10:06:26,650] INFO [Controller id=2] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2022-05-02 10:06:26,651] INFO [Controller id=2] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2022-05-02 10:06:26,651] INFO [Controller id=2] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2022-05-02 10:06:26,656] INFO [Controller id=2] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2022-05-02 10:06:26,667] INFO [Controller id=2] Starting the controller scheduler (kafka.controller.KafkaController)
[2022-05-02 10:06:27,820] INFO [Controller id=2] Newly added brokers: 1, deleted brokers: , bounced brokers: , all live brokers: 1,2 (kafka.controller.KafkaController)
[2022-05-02 10:06:27,820] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2022-05-02 10:06:27,831] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2022-05-02 10:06:27,831] INFO [Controller id=2] New broker startup callback for 1 (kafka.controller.KafkaController)
[2022-05-02 10:06:27,842] INFO [RequestSendThread controllerId=2] Controller 2 connected to fedora:9092 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2022-05-02 10:06:27,926] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-02 10:06:27,950] DEBUG [Controller id=2] Register BrokerModifications handler for List(1) (kafka.controller.KafkaController)
[2022-05-02 10:06:27,958] INFO [Controller id=2] Updated broker epochs cache: HashMap(1 -> 993, 2 -> 950) (kafka.controller.KafkaController)
[2022-05-02 10:06:27,961] DEBUG [Controller id=1] Broker 2 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2022-05-02 10:06:31,669] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2022-05-02 10:06:31,670] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2022-05-02 10:06:31,678] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2022-05-02 10:06:31,679] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2022-05-02 10:06:31,680] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2022-05-02 10:06:31,680] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2022-05-02 10:11:31,681] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2022-05-02 10:11:31,681] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2022-05-02 10:11:31,685] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2022-05-02 10:11:31,685] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2022-05-02 10:11:31,686] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2022-05-02 10:11:31,686] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2022-05-02 10:16:31,686] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2022-05-02 10:16:31,686] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2022-05-02 10:16:31,690] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2022-05-02 10:16:31,690] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2022-05-02 10:16:31,691] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2022-05-02 10:16:31,691] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2022-05-02 10:21:31,691] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2022-05-02 10:21:31,691] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2022-05-02 10:21:31,695] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2022-05-02 10:21:31,696] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2022-05-02 10:21:31,696] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2022-05-02 10:21:31,696] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2022-05-02 10:26:31,697] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2022-05-02 10:26:31,697] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2022-05-02 10:26:31,701] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2022-05-02 10:26:31,701] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2022-05-02 10:26:31,702] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2022-05-02 10:26:31,702] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2022-05-02 10:31:31,703] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2022-05-02 10:31:31,703] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2022-05-02 10:31:31,705] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2022-05-02 10:31:31,705] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2022-05-02 10:31:31,705] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2022-05-02 10:31:31,706] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2022-05-02 10:36:31,706] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2022-05-02 10:36:31,706] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2022-05-02 10:36:31,709] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2022-05-02 10:36:31,709] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2022-05-02 10:36:31,709] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2022-05-02 10:36:31,709] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2022-05-02 10:41:31,710] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2022-05-02 10:41:31,710] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2022-05-02 10:41:31,711] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2022-05-02 10:41:31,711] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2022-05-02 10:41:31,711] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2022-05-02 10:41:31,711] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2022-05-02 10:58:36,782] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2022-05-02 10:58:36,782] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2022-05-02 10:58:36,784] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2022-05-02 10:58:36,784] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2022-05-02 10:58:36,784] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2022-05-02 10:58:36,784] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
